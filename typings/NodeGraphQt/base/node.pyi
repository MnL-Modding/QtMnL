"""
This type stub file was generated by pyright.
"""

from NodeGraphQt.base.model import NodeModel
from NodeGraphQt.qgraphics.node_abstract import AbstractNodeItem

class _ClassProperty:
    def __init__(self, f) -> None: ...
    def __get__(self, instance, owner): ...

class NodeObject:
    """
    The ``NodeGraphQt.NodeObject`` class is the main base class that all
    nodes inherit from.

    .. inheritance-diagram:: NodeGraphQt.NodeObject

    Args:
        qgraphics_item (AbstractNodeItem): QGraphicsItem item used for drawing.
    """

    __identifier__: str = ...
    NODE_NAME: str = ...
    def __init__(self, qgraphics_item=...) -> None:
        """
        Args:
            qgraphics_item (AbstractNodeItem): QGraphicsItem used for drawing.
        """
        ...

    def __repr__(self):  # -> str:
        ...

    @_ClassProperty
    def type_(cls):
        """
        Node type identifier followed by the class name.
        `eg.` ``"nodeGraphQt.nodes.NodeObject"``

        Returns:
            str: node type (``__identifier__.__className__``)
        """
        ...

    @property
    def id(self):  # -> str:
        """
        The node unique id.

        Returns:
            str: unique identifier string to the node.
        """
        ...

    @property
    def graph(self):  # -> None:
        """
        The parent node graph.

        Returns:
            NodeGraphQt.NodeGraph: node graph instance.
        """
        ...

    @property
    def view(self) -> AbstractNodeItem:
        """
        Returns the :class:`QtWidgets.QGraphicsItem` used in the scene.

        Returns:
            NodeGraphQt.qgraphics.node_abstract.AbstractNodeItem: node item.
        """
        ...

    def set_view(self, item: AbstractNodeItem) -> None:
        """
        Set a new ``QGraphicsItem`` item to be used as the view.
        (the provided qgraphics item must be subclassed from the
        ``AbstractNodeItem`` object.)

        Args:
            item (NodeGraphQt.qgraphics.node_abstract.AbstractNodeItem): node item.
        """
        ...

    @property
    def model(self) -> NodeModel:
        """
        Return the node model.

        Returns:
            NodeGraphQt.base.model.NodeModel: node model object.
        """
        ...

    def set_model(self, model: NodeModel):  # -> None:
        """
        Set a new model to the node model.
        (Setting a new node model will also update the views qgraphics item.)

        Args:
            model (NodeGraphQt.base.model.NodeModel): node model object.
        """
        ...

    def update_model(self) -> None:
        """
        Update the node model from view.
        """
        ...

    def update(self) -> None:
        """
        Update the node view from model.
        """
        ...

    def serialize(self):  # -> dict[Any, dict[str, Any]]:
        """
        Serialize node model to a dictionary.

        example:

        .. highlight:: python
        .. code-block:: python

            {'0x106cf75a8': {
                'name': 'foo node',
                'color': (48, 58, 69, 255),
                'border_color': (85, 100, 100, 255),
                'text_color': (255, 255, 255, 180),
                'type': 'io.github.jchanvfx.MyNode',
                'selected': False,
                'disabled': False,
                'visible': True,
                'inputs': {
                    <port_name>: {<node_id>: [<port_name>, <port_name>]}
                },
                'outputs': {
                    <port_name>: {<node_id>: [<port_name>, <port_name>]}
                },
                'input_ports': [<port_name>, <port_name>],
                'output_ports': [<port_name>, <port_name>],
                'width': 0.0,
                'height: 0.0,
                'pos': (0.0, 0.0),
                'layout_direction': 0,
                'custom': {},
                }
            }

        Returns:
            dict: serialized node
        """
        ...

    def name(self) -> str:
        """
        Name of the node.

        Returns:
            str: name of the node.
        """
        ...

    def set_name(self, name: str = ...) -> None:
        """
        Set the name of the node.

        Args:
            name (str): name for the node.
        """
        ...

    def color(
        self,
    ):  # -> tuple[Any | Literal[13], Any | Literal[18], Any | Literal[23]]:
        """
        Returns the node color in (red, green, blue) value.

        Returns:
            tuple: ``(r, g, b)`` from ``0-255`` range.
        """
        ...

    def set_color(self, r=..., g=..., b=...):  # -> None:
        """
        Sets the color of the node in (red, green, blue) value.

        Args:
            r (int): red value ``0-255`` range.
            g (int): green value ``0-255`` range.
            b (int): blue value ``0-255`` range.
        """
        ...

    def disabled(self):  # -> bool:
        """
        Returns whether the node is enabled or disabled.

        Returns:
            bool: True if the node is disabled.
        """
        ...

    def set_disabled(self, mode=...):  # -> None:
        """
        Set the node state to either disabled or enabled.

        Args:
            mode(bool): True to disable node.
        """
        ...

    def selected(self):
        """
        Returns the selected state of the node.

        Returns:
            bool: True if the node is selected.
        """
        ...

    def set_selected(self, selected=...):  # -> None:
        """
        Set the node to be selected or not selected.

        Args:
            selected (bool): True to select the node.
        """
        ...

    def create_property(
        self,
        name,
        value,
        items=...,
        range=...,
        widget_type=...,
        widget_tooltip=...,
        tab=...,
    ):  # -> None:
        """
        Creates a custom property to the node.

        See Also:
            Custom node properties bin widget
            :class:`NodeGraphQt.PropertiesBinWidget`

        Hint:
            To see all the available property widget types to display in
            the ``PropertiesBinWidget`` widget checkout
            :attr:`NodeGraphQt.constants.NodePropWidgetEnum`.

        Args:
            name (str): name of the property.
            value (object): data.
            items (list[str]): items used by widget type
                attr:`NodeGraphQt.constants.NodePropWidgetEnum.QCOMBO_BOX`
            range (tuple or list): ``(min, max)`` values used by
                :attr:`NodeGraphQt.constants.NodePropWidgetEnum.SLIDER`
            widget_type (int): widget flag to display in the
                :class:`NodeGraphQt.PropertiesBinWidget`
            widget_tooltip (str): widget tooltip for the property widget
                displayed in the :class:`NodeGraphQt.PropertiesBinWidget`
            tab (str): name of the widget tab to display in the
                :class:`NodeGraphQt.PropertiesBinWidget`.
        """
        ...

    def properties(self) -> dict[str, object]:
        """
        Returns all the node properties.

        Returns:
            dict: a dictionary of node properties.
        """
        ...

    def get_property(self, name: str) -> object | None:
        """
        Return the node custom property.

        Args:
            name (str): name of the property.

        Returns:
            object: property data.
        """
        ...

    def set_property(self, name: str, value: object, push_undo: bool = ...) -> None:
        """
        Set the value on the node custom property.

        Note:
            When setting the node ``"name"`` property a new unique name will be
            used if another node in the graph has the same node name.

        Args:
            name (str): name of the property.
            value (object): property data (python built in types).
            push_undo (bool): register the command to the undo stack. (default: True)
        """
        ...

    def has_property(self, name: str) -> bool:
        """
        Check if node custom property exists.

        Args:
            name (str): name of the node.

        Returns:
            bool: true if property name exists in the Node.
        """
        ...

    def set_x_pos(self, x: float | int) -> None:
        """
        Set the node horizontal X position in the node graph.

        Args:
            x (float or int): node X position.
        """
        ...

    def set_y_pos(self, y: float | int) -> None:
        """
        Set the node horizontal Y position in the node graph.

        Args:
            y (float or int): node Y position.
        """
        ...

    def set_pos(self, x: float | int, y: float | int) -> None:
        """
        Set the node X and Y position in the node graph.

        Args:
            x (float or int): node X position.
            y (float or int): node Y position.
        """
        ...

    def x_pos(self) -> float:
        """
        Get the node X position in the node graph.

        Returns:
            float: x position.
        """
        ...

    def y_pos(self) -> float:
        """
        Get the node Y position in the node graph.

        Returns:
            float: y position.
        """
        ...

    def pos(self) -> list[float]:
        """
        Get the node XY position in the node graph.

        Returns:
            list[float, float]: x, y position.
        """
        ...

    def layout_direction(self) -> int:
        """
        Returns layout direction for this node.

        See Also:
            :meth:`NodeObject.set_layout_direction`

        Returns:
            int: node layout direction.
        """
        ...

    def set_layout_direction(self, value: int = ...) -> None:
        """
        Sets the node layout direction to either horizontal or vertical on
        the current node only.

        `Implemented in` ``v0.3.0``

        See Also:
            :meth:`NodeGraph.set_layout_direction`
            :meth:`NodeObject.layout_direction`

        Warnings:
            This function does not register to the undo stack.

        Args:
            value (int): layout direction mode.
        """
        ...
