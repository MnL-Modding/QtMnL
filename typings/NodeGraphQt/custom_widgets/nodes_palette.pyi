"""
This type stub file was generated by pyright.
"""

from NodeGraphQt.base.graph import NodeGraph
from PySide6.QtWidgets import QTabWidget, QWidget
from qtpy import QtCore, QtWidgets

class _NodesGridDelegate(QtWidgets.QStyledItemDelegate):
    def paint(self, painter, option, index):  # -> None:
        """
        Args:
            painter (QtGui.QPainter):
            option (QtGui.QStyleOptionViewItem):
            index (QtCore.QModelIndex):
        """
        ...

class _NodesGridProxyModel(QtCore.QSortFilterProxyModel):
    def __init__(self, parent=...) -> None: ...
    def mimeData(self, indexes, p_int=...):  # -> QMimeData:
        ...

class NodesGridView(QtWidgets.QListView):
    def __init__(self, parent=...) -> None: ...
    def clear(self):  # -> None:
        ...

    def add_item(self, label, tooltip=...):  # -> None:
        ...

class NodesPaletteWidget(QtWidgets.QWidget):
    """
    The :class:`NodeGraphQt.NodesPaletteWidget` is a widget for displaying all
    registered nodes from the node graph in a grid layout with this widget a
    user can create nodes by dragging and dropping.

    | *Implemented on NodeGraphQt:* ``v0.1.7``

    .. inheritance-diagram:: NodeGraphQt.NodesPaletteWidget
        :parts: 1

    .. image:: ../_images/nodes_palette.png
        :width: 400px

    .. code-block:: python
        :linenos:

        from NodeGraphQt import NodeGraph, NodesPaletteWidget

        # create node graph.
        graph = NodeGraph()

        # create nodes palette widget.
        nodes_palette = NodesPaletteWidget(parent=None, node_graph=graph)
        nodes_palette.show()

    Args:
        parent (QtWidgets.QWidget): parent of the new widget.
        node_graph (NodeGraphQt.NodeGraph): node graph.
    """

    def __init__(self, parent: QWidget = ..., node_graph: NodeGraph = ...) -> None: ...
    def __repr__(self):  # -> str:
        ...

    def set_category_label(self, category: str, label: str) -> None:
        """
        Override tab label for a node category tab.

        Args:
            category (str): node identifier category eg. ``"nodes.widgets"``
            label (str): custom display label. eg. ``"Node Widgets"``
        """
        ...

    def tab_widget(self) -> QTabWidget:
        """
        Get the tab widget.

        Returns:
            QtWidgets.QTabWidget: tab widget.
        """
        ...

    def update(self):  # -> None:
        """
        Update and refresh the node palette widget.
        """
        ...
