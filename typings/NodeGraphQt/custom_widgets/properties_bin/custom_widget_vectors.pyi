"""
This type stub file was generated by pyright.
"""

from .prop_widgets_abstract import BaseProperty

class _PropVector(BaseProperty):
    """
    Base widget for the PropVector widgets.
    """

    def __init__(self, parent=..., fields=...) -> None: ...
    def set_data_type(self, data_type):  # -> None:
        """
        Sets the input line edit fields to either display in float or int.

        Args:
            data_type(int or float): int or float data type object.
        """
        ...

    def set_steps(self, steps):  # -> None:
        """
        Sets the step items in the MMB context menu.

        Args:
            steps (list[int] or list[float]): list of ints or floats.
        """
        ...

    def set_min(self, value):  # -> None:
        """
        Set the minimum range for the input fields.

        Args:
            value (int or float): minimum range value.
        """
        ...

    def set_max(self, value):  # -> None:
        """
        Set the maximum range for the input fields.

        Args:
            value (int or float): maximum range value.
        """
        ...

    def get_value(self):  # -> list[Any] | None:
        ...

    def set_value(self, value=...):  # -> None:
        ...

class PropVector2(_PropVector):
    """
    Displays a node property as a "Vector2" widget in the PropertiesBin
    widget.

    Useful for display X,Y data.
    """

    def __init__(self, parent=...) -> None: ...

class PropVector3(_PropVector):
    """
    Displays a node property as a "Vector3" widget in the PropertiesBin
    widget.

    Useful for displaying x,y,z data.
    """

    def __init__(self, parent=...) -> None: ...

class PropVector4(_PropVector):
    """
    Displays a node property as a "Vector4"  widget in the PropertiesBin
    widget.

    Useful for display r,g,b,a data.
    """

    def __init__(self, parent=...) -> None: ...
