"""
This type stub file was generated by pyright.
"""

import io
from typing import List, Optional
from rich.progress import Progress, TaskID

class QuietProgress:
    """
    A mock `Progress` class that does absolutely nothing.
    We use this when users pass `quiet=True` since rich's `Progress` still
    prints empty lines with `quiet=True`.
    """

    def start(self, *args, **kwargs):  # -> None:
        ...

    def stop(self, *args, **kwargs):  # -> None:
        ...

    def update(self, *args, **kwargs):  # -> None:
        ...

    def add_task(self, *args, **kwargs):  # -> None:
        ...

    def advance(self, *args, **kwargs):  # -> None:
        ...

    def stop_task(self, *args, **kwargs):  # -> None:
        ...

    def __enter__(self):  # -> Self:
        ...

    def __exit__(self, *args, **kwargs):  # -> None:
        ...

class BufferedWriterWithProgress(io.BufferedWriter):
    def __init__(
        self, handle: io.BufferedWriter, progress: Progress, task_id: TaskID
    ) -> None: ...
    def __enter__(self) -> BufferedWriterWithProgress: ...
    def __exit__(self, exc_type, exc_val, exc_tb):  # -> None:
        ...

    @property
    def closed(self) -> bool: ...
    def close(self):  # -> None:
        ...

    def fileno(self):  # -> int:
        ...

    def flush(self):  # -> None:
        ...

    def isatty(self) -> bool: ...
    def readable(self) -> bool: ...
    def seekable(self) -> bool: ...
    def writable(self) -> bool: ...
    def read(self, size: Optional[int] = ...) -> bytes: ...
    def read1(self, size: Optional[int] = ...) -> bytes: ...
    def readinto(self, b):  # -> int:
        ...

    def readinto1(self, b):  # -> int:
        ...

    def readline(self, size: Optional[int] = ...) -> bytes: ...
    def readlines(self, hint: int = ...) -> List[bytes]: ...
    def write(self, b) -> int: ...
    def writelines(self, lines):  # -> None:
        ...

    def seek(self, offset: int, whence: int = ...) -> int: ...
    def tell(self) -> int: ...
    @property
    def raw(self):  # -> RawIOBase:
        ...

    def detach(self):  # -> RawIOBase:
        ...

def get_download_progress(quiet: bool = ...) -> Progress: ...
